---------------
-- Tokenizer --
---------------

return function(line)
	-- The current stack of tokens. Each token has a type, and can store
	-- other tokens dependending on how the parser handles it.
	local stack = {{type = "subcommand", parameters = {}}}
	local word = ""

	local function addConfigValue(value)
		-- The stack should look like this:
		-- Config, ConfigKey, ConfigValue
		-- We want it like this:
		-- Config(with key=token)
		table.remove(stack, #stack)
		local key = table.remove(stack, #stack)
		local config = stack[#stack]
		config.values[key.key] = value
	end

	-- When reaching the end of a word, it is interpreted depending on
	-- the state of the stack.
	local function finishToken()
		if word == "" then
			return
		end
		local last = stack[#stack]
		if last.type == "subcommand" then
			if not last.command then
				last.command = word
			else
				table.insert(last.parameters, {command = word})
			end
		elseif last.type == "config" then
			table.insert(stack, {type = "configKey", key = word})
		elseif last.type == "configValue" then
			-- Using command as a config value.
			addConfigValue{command = word}
		else
			error(("Couldn't handle appending token '%s' to token of type '%s'"
					):format(word, last.type))
		end
		word = ""
	end

	-- Add the last token on the stack to the parameter list of the one
	-- before it.
	local function popParameter()
		local token = table.remove(stack, #stack)
		local parent = stack[#stack]
		if parent.type == "subcommand" then
			table.insert(parent.parameters, token)
		elseif parent.type == "configValue" then
			addConfigValue(token)
		end
	end

	for i = 1, #line do
		local char = line:sub(i, i)
		if char == "(" then
			-- Last on the stack is probably a subcommand.
			-- TODO: Verify that. (allow ((())))
			finishToken()
			table.insert(stack, {type = "subcommand", parameters = {}})
		elseif char == ")" then
			-- Last on the stack is any command. It should be added to the
			-- parameter list of the previous command on the stack.
			finishToken()
			-- Add the aquired command to the parent parameter list.
			popParameter()
		elseif char == '"' then
			local last = stack[#stack]
			if word:sub(-1, -1) == "\\" then
				-- Add an escaped parenthesis.
				word = word:gsub("\\$", '"')
			elseif last.type == "string" then
				-- Arrived at the end of the string.
				-- TODO: A string could possible also be a start command.
				-- Allow strings to be used as initial commands.
				last.string = word
				popParameter()
				word = ""
			else
				-- Start parsing a new string.
				table.insert(stack, {type = "string"})
			end
		elseif char == "{" then
			table.insert(stack, {type = "config", values = {}})
		elseif char == "}" then
			finishToken()
			-- The last thing on the stack should be the config.
			-- TODO: Verify that.
			stack[#stack - 1].config = table.remove(stack, #stack).values
		elseif char == "=" and stack[#stack].type == "configKey" then
			finishToken()
			-- The next value added with popParameter will use this to add it to
			-- the config token.
			table.insert(stack, {type = "configValue"})
		elseif char == " " and stack[#stack].type ~= "string" then
			finishToken()
		else
			-- Arrived at a letter.
			word = word..char
		end
	end
	finishToken()

	return stack[1]
end
